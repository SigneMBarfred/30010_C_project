#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include "math.h"
#include "ansi.h"
#include "stm32f30x_adc.h"
#include "stm32f30x_rcc.h"
#include "stm32f30x.h"

#define RIGHT_JOY GPIOC, 0
#define UP_JOY GPIOA, 4
#define CENTER_JOY GPIOB, 5
#define LEFT_JOY GPIOC, 1
#define DOWN_JOY GPIOB, 0
#define GREY_KEY GPIOC, 2
#define RED_KEY GPIOC, 3

#define LED_R GPIOB, 4
#define LED_G GPIOC, 7
#define LED_B GPIOA, 9


//Ports for joystick C0, A4, B5, C1, B0

void setPinIn(GPIO_TypeDef *port, unsigned char pin){
	port-> MODER &= ~(0x00000003 << (pin * 2)); // Clear mode register
	//port-> MODER |= (0x00000000 << (pin * 2)); // Set mode register (0x00 – Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)

	port->PUPDR &= ~(0x00000003 << (pin * 2)); // Clear push/pull register
	port->PUPDR |= (0x00000002 << (pin * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)

}

void setPinOut(GPIO_TypeDef *port, unsigned char pin){
	port -> OSPEEDR &= ~(0x3 << (pin * 2)); // Clear speed register
	port -> OSPEEDR |= (0x2 << (pin * 2)); // set speed register (0x01 - 10MHz, 0x02 - 2MHz, 0x03 - 50MHz)

	port -> OTYPER &= ~(0x1 << (pin * 1)); // Clear output type register
	//port -> OTYPER |= (0x0000 << (pin)); // Set output type register (0x00 - Push pull, 0x01 - Open drain)

	port -> MODER &= ~(0x00000003 << (pin * 2)); // Clear mode register
	port -> MODER |= (0x00000001 << (pin * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
}

void setPin(GPIO_TypeDef *port, uint8_t pin, uint8_t value){
	if(value)
		port -> ODR |= (0x0001 << pin);
	else
		port -> ODR &= ~(0x0001 << pin);
}
void setPort(GPIO_TypeDef *port, uint8_t pins, uint8_t value){
	port -> ODR &= ~pins; 	//Setting selected pins in register to zero
	value &= pins; 			//Masking value with selected pins
	port -> ODR &= value;	//Setting the pins in the array
}

void setupJoystickPins(){
	RCC-> AHBENR |= RCC_AHBPeriph_GPIOA;
	RCC-> AHBENR |= RCC_AHBPeriph_GPIOB;
	RCC-> AHBENR |= RCC_AHBPeriph_GPIOC;

	setPinIn(UP_JOY);
	setPinIn(GPIOB, 0);
	setPinIn(GPIOB, 5);
	setPinIn(GPIOC, 0);
	setPinIn(GPIOC, 1);


    setPinIn(GPIOA, 0);
    setPinIn(GPIOA, 1);
    setPinIn(GPIOC, 2);
    setPinIn(GPIOC, 3);


}

void setupLEDPins(){
	RCC-> AHBENR |= RCC_AHBPeriph_GPIOA;
	RCC-> AHBENR |= RCC_AHBPeriph_GPIOB;
	RCC-> AHBENR |= RCC_AHBPeriph_GPIOC;

	setPinOut(LED_R);
	setPinOut(LED_G);
	setPinOut(LED_B);


	setPin(LED_R, 1);
	setPin(LED_G, 0);
	setPin(LED_B, 0);

}

uint16_t readPort(GPIO_TypeDef *port, uint16_t pins){
	return port -> IDR & pins;
}

char readSinglePin(GPIO_TypeDef *port, uint8_t pin){
	uint16_t reading = port -> IDR & (1 << pin);
	return (char) (reading >> pin);
}

uint8_t readJoy(){
	uint8_t joy = 0;
	joy |= readSinglePin(UP_JOY) << 0;
	joy |= readSinglePin(DOWN_JOY) << 1;
	joy |= readSinglePin(LEFT_JOY) << 2;
	joy |= readSinglePin(RIGHT_JOY) << 3;
	joy |= readSinglePin(CENTER_JOY) << 4;
	joy |= readSinglePin(GREY_KEY) << 5;
	joy |= readSinglePin(RED_KEY) << 6;


	return joy;
}

void setLED(uint8_t color){  //..0RGB
	color = ~color;

	setPin(LED_R, (color & (1 << 2)));
	setPin(LED_G, (color & (1 << 1)));
	setPin(LED_B, (color & 1));

	if (readJoy() == (1 << 3)){
		setPin(LED_G, (color & (1 << 3)));
		setPin(LED_B, (color & (1 << 3)));
	}
	if (readJoy() == (1 << 4)){
		setPin(LED_R, (color & (1 << 4)));
		setPin(LED_B, (color & (1 << 4)));
	}
	if (readJoy() == (1 << 5)){
		setPin(LED_R, (color & (1 << 5)));
		setPin(LED_G, (color & (1 << 5)));
	}
	if (readJoy() == (1 << 6)){
		setPin(LED_R, (color & (1 << 6)));
		setPin(LED_G, (color & (1 << 6)));
		setPin(LED_B, (color & (1 << 6)));
	}



	//printf("LED: (%d, %d, %d)", readSinglePin(LED_R), readSinglePin(LED_G), readSinglePin(LED_B));
}

typedef struct {
	int32_t pos_x,pos_y; //position
	int32_t v_x,v_y; //velocity
}vector_t;

void setdir(vector_t *ball){
	uint8_t readball = readJoy();
	if(readball == 1){
		ball->v_x = 0;
		ball->v_y = -2000;
	}
	else if(readball == (1 << 1)){
		ball->v_x = 0;
		ball->v_y = 2000;
	}
	else if(readball == (1 << 2)){
		ball->v_x = -2000;
		ball->v_y = 0;
	}
	else if(readball == (1 << 3)){
		ball->v_x = 2000;
		ball->v_y = 0;
	}
	else if(readball == (1 << 4)){
		ball->v_x = 0;
		ball->v_y = 0;
	}
}


int ballUpdate(vector_t *ball){ //scale factor is mentioned in exc desc; meaning?
	static int count;
    if (ball->pos_x>>14 <= 2+1 || ball->pos_x>>14 >= 140-2) {
        ball->v_x *= -1;
        count ++;
    }


    if (ball->pos_y>>14 <= 2+1  || ball->pos_y>>14 >= 40-1) {
       ball->v_y *= -1;
       count++;
    }


	ball->pos_x += ball->v_x; //It adds the right operand to the left operand and assign the result to the left operand
	ball->pos_y += ball->v_y;

	return count;

}


void drawBall(vector_t *ball){
	gotoxy(ball->pos_x>>14,ball->pos_y>>14);
	printf("%c",111);
}

// Function to configure ADC
void configureADC() {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
    RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
    RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12

    ADC1->CR = 0x00000000; // Clear CR register
    ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
    ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1

    ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
    for (int i = 0; i < 1000; i++) {} // Wait for about 16 microseconds

    ADC1->CR |= 0x80000000; // Start ADC1 calibration
    while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
    for (int i = 0; i < 100; i++) {} // Wait for a little while

    ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
    while (!(ADC1->ISR & 0x00000001)); // Wait until ready
}

// Function to perform ADC measurement on a specific channel
uint16_t measureADC(uint8_t channel) {
    ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_1Cycles5);
    ADC_StartConversion(ADC1);
    while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0);
    return ADC_GetConversionValue(ADC1);
}
void potf(vector_t *ball){
	uint16_t adcValuePA0 = measureADC(ADC_Channel_1); // Channel for PA0
	uint16_t adcValuePA1 = measureADC(ADC_Channel_2); // Channel for PA1
	if(adcValuePA0 >= 2500){
		ball->v_x = 2000;
		//ball->v_y = 0;
	}
	else if(adcValuePA0 <= 1500){
		ball->v_x = -2000;
		//ball->v_y = 0;
	}
	else if(adcValuePA1 >= 2500){
		//ball->v_x = 0;
		ball->v_y = -2000;
	}
	else if(adcValuePA1 <= 1500){
		//ball->v_x = 0;
		ball->v_y = 2000;
	}
	//cross
	/*else if(adcValuePA0 >= 2500, adcValuePA1 >= 2500){
		ball->v_x = 2000;
		ball->v_y = -2000;
	}
	else if(adcValuePA0 <= 1500, adcValuePA1 >= 2500){
		ball->v_x = -2000;
		ball->v_y = 2000;
	}
	else if(adcValuePA0 >= 2500, adcValuePA1 <= 1500){
		ball->v_x = -2000;
		ball->v_y = -2000;
	}
	else if(adcValuePA0 <= 1500, adcValuePA1 <= 1500){
		ball->v_x = 2000;
		ball->v_y = 2000;
	}*/
	else if(adcValuePA0 >= 1501, adcValuePA0 <= 2499, adcValuePA1 >= 1501, adcValuePA1 <= 2499){
		ball->v_x = 0;
		ball->v_y = 0;
	}
	printf("ADC PA0: %04u, ADC PA1: %04u\r", adcValuePA0, adcValuePA1);

}
